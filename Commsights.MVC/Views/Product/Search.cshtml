@{ ViewData["Title"] = "Search"; }

<div class="row">
    <div class="col-md-12">
        <div class="card card-primary">
            <div class="card-header">
                <h3 class="card-title">Data - Search</h3>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class='col-sm-8'>
                        <input id="Search" name="Search" class="form-control" placeholder="Search" type="text" value="" />
                    </div>
                    <div class='col-sm-1'>
                        <button type="button" class="btn btn-success" onclick="onSearch()">
                            <span class="fa fa-search"></span>
                        </button>
                    </div>
                </div>
                <br />
                @(Html.Kendo().Grid<Commsights.Data.Models.Product>()
.Name("Product")
.Columns(columns =>
{    
    columns.Bound(t => t.DatePublish).Title("Publish").Width(200);
    columns.Template(@"<a onclick='javascript:OpenWindowByURL(""#=Urlcode#"");' style='color: blue; cursor: pointer;'>#=Title#</a>").Title("Title + URL").Width(1000);
    columns.Bound(t => t.Description).Title("Description").Width(2000);
    columns.Bound(t => t.Urlcode).Title("URL").Width(2000);
})
.ToolBar(toolBar => toolBar.Search())
.Editable(editable => editable.Mode(GridEditMode.InLine))
.Sortable()
.Scrollable()
.Reorderable(r => r.Columns(true))
.Resizable(r => r.Columns(true))
.Pageable(pageable => pageable
.Refresh(true)
.PageSizes(true)
.ButtonCount(10))
.Excel(excel => excel
.FileName("Config.xlsx")
.Filterable(true)
.ProxyURL(Url.Action("ExportExcel", "Config"))
)
.Pdf(pdf => pdf
.AllPages()
.AvoidLinks()
.PaperSize("A4")
.Margin("2cm", "1cm", "1cm", "1cm")
.Landscape()
.RepeatHeaders()
.FileName("Config.pdf")
)
.HtmlAttributes(new { @class = "KendoGrid" })
.Search(search => { search.Field(f => f.Title); search.Field(f => f.Urlcode); search.Field(f => f.Description); })
.DataSource(dataSource => dataSource
.Ajax()
.PageSize(1000)
.Model(model =>
{
    model.Id(t => t.ID);
    model.Field(t => t.DatePublish).Editable(false);
    model.Field(t => t.Title).Editable(false);
    model.Field(t => t.Urlcode).Editable(false);
})
.Events(t => { t.RequestEnd("onGridRequestEnd"); })
.Read(t => t.Action("GetBySearchToList", "Product").Data("filterProduct"))
)
)
            </div>
        </div>
    </div>
</div>



@(Html.Kendo().Notification()
    .Name("Notification")
    .Position(p => p.Pinned(true).Top(30).Right(30))
    .Width(400)
)
<script>
    function onGridRequestEnd(e) {
        if ((e.type == "create") || (e.type == "update") || (e.type == "destroy")) {
            var response = e.response;
            var messageType = response.split('-')[0];
            var note = response.split('-')[1];
            var notification = $("#Notification").data("kendoNotification");
            notification.show(note, messageType);
            $("#Product").data("kendoGrid").dataSource.read();
        }
    }
    function filterProduct(e) {
        var searchValue = $("#Search").val();
        return { search: searchValue };
    }
    function onSearch() {
        $("#Product").data("kendoGrid").dataSource.read();
    }
</script>
